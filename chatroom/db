NEW SERVER.JS

'use strict';

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const PORT = process.env.PORT || 8000;
const ORIGIN = process.env.ALLOWED_ORIGIN || '*';
const REGION = process.env.AWS_REGION || 'us-east-1';

const app = express();

app.use(cors({
  origin: ORIGIN === '*' ? true : [ORIGIN],
  credentials: true
}));
app.use(express.json({ limit: '2mb' })); 

app.use(express.static(path.join(__dirname, 'public')));

app.use((req, res, next) => {
  console.log('REQ', req.method, req.url);
  next();
});

app.get('/__routes', (req, res) => {
  const routes = (app._router && app._router.stack || [])
    .filter(r => r.route)
    .map(r => {
      const methods = Object.keys(r.route.methods).join(',');
      return `${methods.toUpperCase()} ${r.route.path}`;
    });
  res.json({ routes });
});
app.get('/__whoami', (req, res) => {
  const fs = require('fs');
  const p = path.resolve(__dirname, 'public', 'chat.html');
  res.json({
    __dirname,
    publicDir: path.resolve(__dirname, 'public'),
    chatPath: p,
    exists: fs.existsSync(p)
  });
});

app.get('/health', (_req, res) => res.json({ ok: true, region: REGION }));

app.get('/chat.html', (req, res) => {
  res.sendFile(path.resolve(__dirname, 'public', 'chat.html'));
});

const { LexRuntimeV2Client, RecognizeTextCommand } = require('@aws-sdk/client-lex-runtime-v2');
const lex = new LexRuntimeV2Client({ region: REGION });

app.post('/api/lex/text', async (req, res) => {
  try {
    const { text, sessionId } = req.body || {};
    if (!text) return res.status(400).json({ error: 'text required' });

    const out = await lex.send(new RecognizeTextCommand({
      botId: process.env.LEX_BOT_ID,
      botAliasId: process.env.LEX_BOT_ALIAS_ID,
      localeId: process.env.LEX_LOCALE || 'en_US',
      sessionId: sessionId || ('web-' + Math.random().toString(36).slice(2)),
      text
    }));
    const reply = (out.messages || []).map(m => m.content).filter(Boolean).join('\n') || '(no response)';
    return res.json({ reply, sessionId: out.sessionId });
  } catch (err) {
    console.error('LEX_ERROR', err);
    return res.status(500).json({ error: err.name || 'LexFailed', message: err.message });
  }
});

const {
  ChimeSDKMessagingClient,
  SendChannelMessageCommand,
  ListChannelMessagesCommand
} = require('@aws-sdk/client-chime-sdk-messaging');
const chimeMsg = new ChimeSDKMessagingClient({ region: REGION });

app.post('/api/chime/send', async (req, res) => {
  try {
    const ChannelArn = req.body.channelArn || process.env.CHIME_CHANNEL_ARN;
    const ChimeBearer = req.body.senderArn || process.env.CHIME_APP_USER_ARN;
    const Content = req.body.content;
    if (!Content) return res.status(400).json({ error: 'content required' });

    const out = await chimeMsg.send(new SendChannelMessageCommand({
      ChannelArn,
      ChimeBearer,
      Content,
      Persistence: 'PERSISTENT',
      Type: 'STANDARD',
      ClientRequestToken: cryptoRandom()
    }));

    return res.json(out);
  } catch (err) {
    console.error('CHIME_SEND_ERROR', err);
    return res.status(403).json({ error: err.name || 'ChimeSendFailed', message: err.message });
  }
});

app.get('/api/chime/list', async (req, res) => {
  try {
    const ChannelArn = req.query.channelArn || process.env.CHIME_CHANNEL_ARN;
    const ChimeBearer = req.query.bearer || process.env.CHIME_APP_USER_ARN;
    const NextToken = req.query.nextToken;

    const out = await chimeMsg.send(new ListChannelMessagesCommand({
      ChannelArn,
      ChimeBearer,
      SortOrder: 'ASCENDING',
      MaxResults: 50,
      NextToken
    }));

    return res.json(out);
  } catch (err) {
    console.error('CHIME_LIST_ERROR', err);
    return res.status(403).json({ error: err.name || 'ChimeListFailed', message: err.message });
  }
});

function cryptoRandom() {
  try { return require('crypto').randomUUID(); }
  catch { return Math.random().toString(36).slice(2); }
}

app.listen(PORT, () => {
  console.log(`Server up on :${PORT} (region ${REGION})`);
});

----------------------------------------------------------------------------------------------------------------
OLD SERVER.JS

'use strict';

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const PORT = process.env.PORT || 8000;
const ORIGIN = process.env.ALLOWED_ORIGIN || '*';
const REGION = process.env.AWS_REGION || 'us-east-1';
const app = express();
app.get('/__routes', (req, res) => {
  const routes = (app._router && app._router.stack || [])
    .filter(r => r.route)
    .map(r => {
      const methods = Object.keys(r.route.methods).join(',');
      return '${methods.toUpperCase()} ${r.route.path}';
    });
  res.json({ routes });
});
const path = require('path');
app.use(cors({ origin: ORIGIN === '*' ? true : [ORIGIN], credentials: true }));
app.use(express.json({ limit: '1mb' }));
app.use(express.static(path.join(__dirname, 'public')));
app.use((req,res,next)=>{ console.log('REQ', req.method, req.url); next(); });
app.get('/chat.html', (req, res) => {
  res.sendFile(path.resolve(__dirname, 'public', 'chat.html'));
});
app.get('/__whoami', (req, res) => {
  const fs = require('fs');
  const p = require('path').resolve(__dirname, 'public', 'chat.html');
  res.json({
    __dirname,
    publicDir: require('path').resolve(__dirname, 'public'),
    chatPath: p,
    exists: fs.existsSync(p)
  });
 });
app.get('/health', (_req, res) => res.json({ ok: true, region: REGION }));
const { LexRuntimeV2Client, RecognizeTextCommand } = require('@aws-sdk/client-lex-runtime-v2');
const lex = new LexRuntimeV2Client({ region: REGION });

app.post('/api/lex/text', async (req, res) => {
  try {
    const { text, sessionId } = req.body || {};
    if (!text) return res.status(400).json({ error: 'text required' });

    const out = await lex.send(new RecognizeTextCommand({
      botId: process.env.LEX_BOT_ID,
      botAliasId: process.env.LEX_BOT_ALIAS_ID,
      localeId: process.env.LEX_LOCALE || 'en_US',
      sessionId: sessionId || ('web-' + Math.random().toString(36).slice(2)),
      text
    }));
    const reply = (out.messages || []).map(m => m.content).filter(Boolean).join('\n') || '(no response)';
    return res.json({ reply, sessionId: out.sessionId });
  } catch (err) {
    console.error('LEX_ERROR', err);
    return res.status(500).json({ error: err.name || 'LexFailed', message: err.message });
  }
});
const { ChimeSDKMessagingClient, SendChannelMessageCommand, ListChannelMessagesCommand } =
  require('@aws-sdk/client-chime-sdk-messaging');
const chimeMsg = new ChimeSDKMessagingClient({ region: REGION });


app.post('/api/chime/send', async (req, res) => {
  try {
    const ChannelArn = req.body.channelArn || process.env.CHIME_CHANNEL_ARN;
    const ChimeBearer = req.body.senderArn || process.env.CHIME_APP_USER_ARN;
    const Content = req.body.content;

    if (!Content) return res.status(400).json({ error: 'content required' });
    const out = await chimeMsg.send(new SendChannelMessageCommand({
      ChannelArn,
      ChimeBearer,
      Content,
      Persistence: 'PERSISTENT',
      Type: 'STANDARD',
      ClientRequestToken: cryptoRandom()
    }));

    return res.json(out);
  } catch (err) {
    console.error('CHIME_SEND_ERROR', err);
    return res.status(403).json({ error: err.name || 'ChimeSendFailed', message: err.message });
  }
});
app.get('/api/chime/list', async (req, res) => {
  try {
    const ChannelArn = req.query.channelArn || process.env.CHIME_CHANNEL_ARN;
    const ChimeBearer = req.query.bearer || process.env.CHIME_APP_USER_ARN;
    const NextToken = req.query.nextToken;

    const out = await chimeMsg.send(new ListChannelMessagesCommand({
      ChannelArn,
      ChimeBearer,
      SortOrder: 'ASCENDING',
      MaxResults: 50,
      NextToken
    }));

    return res.json(out);
  } catch (err) {
    console.error('CHIME_LIST_ERROR', err);
    return res.status(403).json({ error: err.name || 'ChimeListFailed', message: err.message });
  }
});
function cryptoRandom() {
  try { return require('crypto').randomUUID(); } catch { return Math.random().toString(36).slice(2); }
}


app.listen(PORT, () => {
  console.log(`Server up on :${PORT} (region ${REGION})`);
});

























nginx setup for chat:
sudo tee /etc/nginx/sites-available/techacumen-chat >/dev/null <<'EOF'
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {
  listen 80;
  server_name technicalacumen.otsuka-us.com;   # <- your domain

  root /var/www/html;
  index index.html;
  location = /health {
    proxy_pass http://127.0.0.1:8000/health;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
  }


  location = /chat.html {
    proxy_pass http://127.0.0.1:8000/chat.html;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
  }


  location /api/ {
    proxy_pass http://127.0.0.1:8000$request_uri;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
  }

}
EOF

-------------------------------------------
sso saml settings:
{
  "strict": true,
  "debug": true,
  "sp": {
    "entityId": "http://localhost:5000/metadata/",
    "assertionConsumerService": {
      "url": "http://localhost:5000/saml/acs/",
      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
    },
    "singleLogoutService": {
      "url": "http://localhost:5000/saml/sls/",
      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
    },
    "x509cert": "",
    "privateKey": ""
  },
  "idp": {
    "entityId": "",
    "singleSignOnService": {
      "url": "",
      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
    },
    "singleLogoutService": {
      "url": "",
      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
    },
    "x509cert": ""
  }
}

----------------------------------------------
config:
import os

class Config:
    SQLALCHEMY_DATABASE_URI = os.environ.get(
        "DATABASE_URL",
        "postgresql://acumenuser:acumenpass123@localhost:5432/technicalacumen"
    )
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = os.environ.get("SECRET_KEY", "supersecret")

models:
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)

app:
from flask import Flask, request, jsonify
from models import db, User
from config import Config

app = Flask(__name__)
app.config.from_object(Config)
db.init_app(app)

@app.before_first_request
def create_tables():
    db.create_all()

@app.route('/signup', methods=['POST'])
def signup():
    data = request.json
    if not data.get('username') or not data.get('password') or not data.get('email'):
        return jsonify({"error": "Missing fields"}), 400
    if User.query.filter_by(username=data['username']).first():
        return jsonify({"error": "User exists"}), 400
    user = User(username=data['username'], password=data['password'], email=data['email'])
    db.session.add(user)
    db.session.commit()
    return jsonify({"message": "Signup successful!"}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(username=data['username'], password=data['password']).first()
    if user:
        return jsonify({"message": "Login successful!"}), 200
    else:
        return jsonify({"error": "Invalid credentials"}), 401

@app.route('/search', methods=['GET'])
def search():
    q = request.args.get('q', '')
    results = User.query.filter(User.username.ilike(f'%{q}%')).all()
    return jsonify([{"username": u.username, "email": u.email} for u in results])

if __name__ == '__main__':
    app.run(port=5000, debug=True)

