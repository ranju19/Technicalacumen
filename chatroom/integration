cd /opt/techacumen-chat
mkdir -p public

cat > public/chat.html <<'HTML'
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>TA Chat Test</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body style="font-family:system-ui; max-width:720px; margin:24px auto;">
  <h2>Chime Chat (Test)</h2>

  <div id="message-list" style="height:260px; overflow:auto; border:1px solid #333; padding:.5rem; border-radius:8px;"></div>
  <div style="display:flex; gap:.5rem; margin-top:.5rem;">
    <input id="msg-input" placeholder="Type a message…" style="flex:1; padding:.5rem; border-radius:6px; border:1px solid #333;">
    <button id="send-btn" style="padding:.5rem 1rem;">Send</button>
  </div>

  <script>
  const BASE = 'http://localhost:8000';
  const API_LIST = BASE + '/api/chime/list';
  const API_SEND = BASE + '/api/chime/send';

  const msgListEl = document.getElementById('message-list');
  const msgInput  = document.getElementById('msg-input');
  const sendBtn   = document.getElementById('send-btn');

  let nextToken = null;
  let polling = null;

  function addMessageToUI(m) {
    const div = document.createElement('div');
    const when = m.ts ? new Date(m.ts).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}) : '';
    div.innerHTML = '<div style="opacity:.7;font-size:.8rem">'+(m.user||'user')+' · '+when+'</div>' +
                    '<div>'+ (m.text||'').replace(/</g,'&lt;') +'</div>';
    msgListEl.appendChild(div);
    msgListEl.scrollTop = msgListEl.scrollHeight;
  }

  async function listMessages(initial=false){
    try {
      const url = new URL(API_LIST);
      if (nextToken && !initial) url.searchParams.set('nextToken', nextToken);
      const res = await fetch(url);
      const data = await res.json();
      nextToken = data.NextToken || null;
      (data.ChannelMessages || []).forEach(m => {
        addMessageToUI({
          text: m.Content,
          user: (m.Sender?.Arn || '').split('/').pop(),
          ts: Date.parse(m.CreatedTimestamp)
        });
      });
    } catch(e){ console.error(e); }
  }

  async function sendChatMessage(text){
    const res = await fetch(API_SEND, {
      method: 'POST',
      headers: { 'Content-Type':'application/json' },
      body: JSON.stringify({ content: text })
    });
    if (!res.ok) console.warn('send failed', await res.text());
  }

  sendBtn?.addEventListener('click', async () => {
    const t = (msgInput.value||'').trim();
    if (!t) return;
    msgInput.value = '';
    await sendChatMessage(t);
  });

  msgInput?.addEventListener('keydown', async (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendBtn.click();
    }
  });

  (async function start(){
    await listMessages(true);
    polling = setInterval(listMessages, 2500);
  })();
  </script>
</body>
</html>
HTML

---------------------------------------------------------------------
cd /opt/techacumen-chat

cat > server.js <<'EOF'
'use strict';

require('dotenv').config();
const express = require('express');
const cors = require('cors');

// ---- Env ----
const PORT = process.env.PORT || 8000;
const ORIGIN = process.env.ALLOWED_ORIGIN || '*';
const REGION = process.env.AWS_REGION || 'us-east-1';

// ---- App ----
const app = express();
app.use(cors({ origin: ORIGIN === '*' ? true : [ORIGIN], credentials: true }));
app.use(express.json({ limit: '1mb' }));

app.get('/health', (_req, res) => res.json({ ok: true, region: REGION }));

// ---- AWS SDK v3: Lex ----
const { LexRuntimeV2Client, RecognizeTextCommand } = require('@aws-sdk/client-lex-runtime-v2');
const lex = new LexRuntimeV2Client({ region: REGION });

app.post('/api/lex/text', async (req, res) => {
  try {
    const { text, sessionId } = req.body || {};
    if (!text) return res.status(400).json({ error: 'text required' });

    const out = await lex.send(new RecognizeTextCommand({
      botId: process.env.LEX_BOT_ID,
      botAliasId: process.env.LEX_BOT_ALIAS_ID,
      localeId: process.env.LEX_LOCALE || 'en_US',
      sessionId: sessionId || ('web-' + Math.random().toString(36).slice(2)),
      text
    }));

    const reply = (out.messages || []).map(m => m.content).filter(Boolean).join('\n') || '(no response)';
    return res.json({ reply, sessionId: out.sessionId });
  } catch (err) {
    console.error('LEX_ERROR', err);
    return res.status(500).json({ error: err.name || 'LexFailed', message: err.message });
  }
});

// ---- AWS SDK v3: Chime Messaging (simple send/list) ----
const { ChimeSDKMessagingClient, SendChannelMessageCommand, ListChannelMessagesCommand } =
  require('@aws-sdk/client-chime-sdk-messaging');
const chimeMsg = new ChimeSDKMessagingClient({ region: REGION });

// Send a message into a channel
app.post('/api/chime/send', async (req, res) => {
  try {
    const ChannelArn = req.body.channelArn || process.env.CHIME_CHANNEL_ARN;
    const ChimeBearer = req.body.senderArn || process.env.CHIME_APP_USER_ARN;
    const Content = req.body.content;

    if (!Content) return res.status(400).json({ error: 'content required' });

    const out = await chimeMsg.send(new SendChannelMessageCommand({
      ChannelArn,
      ChimeBearer,
      Content,
      Persistence: 'PERSISTENT',
      Type: 'STANDARD',
      ClientRequestToken: cryptoRandom()
    }));

    return res.json(out);
  } catch (err) {
    console.error('CHIME_SEND_ERROR', err);
    return res.status(403).json({ error: err.name || 'ChimeSendFailed', message: err.message });
  }
});

// List messages (initial load or polling)
app.get('/api/chime/list', async (req, res) => {
  try {
    const ChannelArn = req.query.channelArn || process.env.CHIME_CHANNEL_ARN;
    const ChimeBearer = req.query.bearer || process.env.CHIME_APP_USER_ARN;
    const NextToken = req.query.nextToken;

    const out = await chimeMsg.send(new ListChannelMessagesCommand({
      ChannelArn,
      ChimeBearer,
      SortOrder: 'ASCENDING',
      MaxResults: 50,
      NextToken
    }));

    return res.json(out);
  } catch (err) {
    console.error('CHIME_LIST_ERROR', err);
    return res.status(403).json({ error: err.name || 'ChimeListFailed', message: err.message });
  }
});

// ---- Helpers ----
function cryptoRandom() {
  try { return require('crypto').randomUUID(); } catch { return Math.random().toString(36).slice(2); }
}

// ---- Start ----
app.listen(PORT, () => {
  console.log(`Server up on :${PORT} (region ${REGION})`);
});
EOF

